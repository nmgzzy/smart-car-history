//此文件包含OLED调试的相关函数
//注意不要在中断函数中使用OLED显示
#include "systemUI.h"
#define PAGE_MAX 7
#define WORDS_MAX 15

//page0 选择参数
//page1 主菜单
//page2 设置模式
//page3 设置参数
//page4 设置参数2

//private
//static int8 voltage = 0;
static uint8 flag_updown=0;
static uint8 flag_pid_K=0;           //1-p 2-i 3-d
static uint8 flag_which_pid=0;       //1-angle 2-arate 3-speed 4-dir 5-dgyr
static uint8 flag_plus=0;
static uint8 flag_minus=0;
static uint8 flag_which_page=0;      //0-null 1-adc 2-mpu 3-status 4-示波器 5-参数
static uint8 flag_other_parameter=0;    //1-target_angle 2-target_speed 3-set_time 4-K_hv

static float show_parameter;

uint8 flag_inf = 0;
static uint8 inf_buf = 0;
static uint8 inf_buff[10]={0};
static uint8 inf_key[21]   = {0x45,0x46,0x47,0x44,0x40,0x43,0x07,0x15,0x09,0x16,
                                0x19,0x0D,0X0C,0X18,0X5E,0X08,0X1C,0X5A,0X42,0X52,0X4A};
static uint8 inf_value[21] = {'p', 'u', 'm', 'l', 'c', 'r', 'o', 'd', 'b', 's',
                                '0', '.', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
static uint8 menu[PAGE_MAX][8][WORDS_MAX] =
{
    //page0-select param
    {
        "0",
        "1",
        "2",
        "",
        "n0",
        "n1",
        "n2",
        ""
    },
    //page1-main
    {
        "GO!!!",
        "show",
        "set",
        "Param1",
        "Param2",
        "",
        "",
        ""
    },
    //page2-set
    {
        "6s",
        "17s",
        "50s",
        "Stand mode",
        "Debug mode",
        "StaSpd mode",
        "StaDir mode",
        "PWM test"
    },
    //page3-param1
    {
        "DirKp",
        "DirKd",
        "DgyrKp",
        "DgyrKd",
        "SpeedKp",
        "SpeedKi",
        "SpeedKd",
        "K_hv"
    },
    //page4-param2
    {
        "TgtAngle",
        "TgtSpd",
        "setTime",
        "AngleKp",
        "AngleKd",
        "",
        "",
        ""
    },
    //page5
    {
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
    },
    //page6
    {
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
    }
};

static void init_infrared(void)
{
    port_init(INF_PIN, IRQ_FALLING | PF | ALT1 | PULLUP);
    set_irq_priority(PORTE_IRQn,5);						//设置优先级
    enable_irq(PORTE_IRQn);								//打开PORTA中断开关
    EnableInterrupts;
}

static uint32 get_inf_time(uint8 level)
{
    pit_time_start(pit3);
    if(level)
        while(gpio_get(INF_PIN))
        {
            if(pit_time_get(pit3)/bus_clk_mhz > 11000)
                break;
        }
    else
        while(!gpio_get(INF_PIN))
        {
            if(pit_time_get(pit3)/bus_clk_mhz > 11000)
                break;
        }
    return pit_time_get(pit3)/bus_clk_mhz;
}

void inf_ex_interrupt(void)
{
    uint8 i,j;
    uint32 time;
    uint8 byte;
    uint8 infcode[4];

    time = get_inf_time(0);
    flag_inf = 0;
    if((time>9500) || (time<8500))
        return;
    time = get_inf_time(1);
    if((time>5000) || (time<4000))
        return;

    for(i=0; i<4; i++)
	{
		for(j=0; j<8; j++)
		{
			time = get_inf_time(0);
			if((time<410) ||(time >710))
				return;
			time = get_inf_time(1);
			if((time>410) && (time <710))
				byte >>= 1;
			else if((time>1480) && (time<1880))
			{
				byte >>= 1;
				byte |= 0x80;
			}
			else
				return;
		}
		infcode[i] = byte;
	}
    if(~infcode[3] == infcode[2])
    {
        inf_buf = infcode[2];
        flag_inf = 1;
    }
}

//更新屏幕
static void print_menu(uint8 page, uint8 choice)
{
    static uint8 last_page = 0;
    uint8 i;
    if(last_page != page)
    {
        OLED_Fill(0X00);
    }
    switch(page)
    {
        case 0:         //首页
            OLED_P8x16Str(20,0,"read data n?");
            //Get_AccData();
            //acc_angle = get_acc_angle();         //加速度计计算角度
            //OLED_Print_int16(20, 3, (int16)(acc_angle * 10), 1, 1);
            for(i=0; i<8; i++)
                OLED_P6x8Str(7,i,menu[page][i]);
            break;
        case 1:         //主菜单
            for(i=0; i<8; i++)
                OLED_P6x8Str(10,i,menu[page][i]);
            OLED_P8x16Str(100,0,"NNU");
            OLED_P8x16Str(100,2,"ZZY");
            /*voltage = (int)((adc_once(VBAT_PIN,ADC_12bit)-2800)/3.3f);
            voltage = limit_ab(voltage, 0, 100);
            OLED_Print_Num1(80, 7, voltage, 0);*/
            break;
        case 2:         //set
            for(i=0; i<8; i++)
                OLED_P6x8Str(7,i,menu[page][i]);
            break;
        case 3:         //parameter
        case 4:         //parameter---2
            for(i=0; i<8; i++)
                OLED_P6x8Str(7,i,menu[page][i]);
            OLED_Print_float(64, 0, show_parameter, 1);
            break;
        /*case 5:         //show
            Get_AccData();
            acc_angle = get_acc_angle();         //加速度计计算角度
            OLED_P6x8Str(64,1,"LH ");
            OLED_P6x8Str(64,3,"RH ");
            OLED_P6x8Str(64,5,"LV ");
            OLED_P6x8Str(64,7,"RV ");

            //OLED_Print_Num1(0, 0, (int16)(acc_angle * 10), 1);
            //OLED_Print_Num1(0, 4, (int16)(err * 100), 2);
            //OLED_Print_Num(0, 2, (uint16)(k_adc*1000), 0);
            break;
        case 6:         //parameter2
            OLED_P6x8Str(7,0,"k_md");
            OLED_P6x8Str(7,1,"ftestVal6");
            OLED_P6x8Str(7,2,"Kadc");
            OLED_P6x8Str(7,3,"Kcrc1");
            OLED_P6x8Str(7,4,"Kcrc2");
            OLED_P6x8Str(7,5,"Kcrc3");
            OLED_P6x8Str(7,6,"Kcrc4");
            OLED_P6x8Str(7,7,"Kcrc5");
            OLED_Print_float(64, 0, show_parameter, 1);
            break;
        case 7:         //set---2
            OLED_P6x8Str(7,0,"clDelay");
            OLED_P6x8Str(7,1,"cl_num");
            OLED_P6x8Str(7,2,"cl_time");
            OLED_P6x8Str(7,3,"stopTime");
            OLED_P6x8Str(7,4,"a");
            OLED_P6x8Str(7,5,"b");
            //OLED_P6x8Str(7,6,"");
            //OLED_P6x8Str(7,7,"");
            OLED_Print_float(64, 0, show_parameter, 1);
            break;*/
    }
    last_page = page;
}


//读取五向开关
static uint8 readKey(void)
{
    uint8 i, key = 0;
    static uint8 j = 0;
    static uint8 keysta[5]={1,1,1,1,1},keybk[5]={1,1,1,1,1};
    keysta[0] = gpio_get(KEY_PIN_U);
    keysta[1] = gpio_get(KEY_PIN_L);
    keysta[2] = gpio_get(KEY_PIN_D);
    keysta[3] = gpio_get(KEY_PIN_R);
    keysta[4] = gpio_get(KEY_PIN_M);

    for(i=0; i<5; i++)
    {
        if(keysta[i] != keybk[i])
        {
            if(keybk[i] == 0)
            {
                key = i+1;
            }
            keybk[i]=keysta[i];
        }
        else if(keysta[i] == 0 && keybk[i] == 0 && (i==0||i==2) && flag_updown == 1)
        {
            j++;
            if(j > 10)
            {
                j = 0;
                key = i+1;
            }
        }
    }
    return key;
}

static void parameter_adj_f(float* k, float range)
{
    show_parameter = *k;
    if(flag_plus == 1)
    {
        flag_plus = 0;
        *k += range;
    }
    else if(flag_minus == 1)
    {
        flag_minus = 0;
        *k -= range;
    }
}

static void parameter_adj_ui(uint16* k, int range)
{
    show_parameter = *k;
    if(flag_plus == 1)
    {
        flag_plus = 0;
        *k += range;
    }
    else if(flag_minus == 1)
    {
        flag_minus = 0;
        if(*k >= range)
            *k -= range;
    }
}

static void parameter_adj_i(int16* k, int range)
{
    show_parameter = *k;
    if(flag_plus == 1)
    {
        flag_plus = 0;
        *k += range;
    }
    else if(flag_minus == 1)
    {
        flag_minus = 0;
        *k -= range;
    }
}

//调整参数
static void adj_parameter(void)
{
    /*if(flag_which_pid == PID_ANGLE)
    {
        if(flag_pid_K == PID_KP)        parameter_plus_minus_f(&pid_angle.p, 1);
        else if(flag_pid_K == PID_KD)   parameter_plus_minus_f(&pid_angle.d, 0.1);
    }
    if(flag_which_pid == PID_ARATE)
    {
        if(flag_pid_K == PID_KP)        parameter_plus_minus_f(&pid_arate.p, 0.5);
        else if(flag_pid_K == PID_KD)   parameter_plus_minus_f(&pid_arate.d, 0.1);
    }
    else if(flag_which_pid == PID_SPEED)
    {
        if(flag_pid_K == PID_KP)        parameter_plus_minus_f(&pid_speed.p, 1);
        else if(flag_pid_K == PID_KI)   parameter_plus_minus_f(&pid_speed.i, 0.1);
        else if(flag_pid_K == PID_KD)   parameter_plus_minus_f(&pid_speed.d, 0.01);
    }
    else if(flag_which_pid == PID_DIR)
    {
        if(flag_pid_K == PID_KP)        parameter_plus_minus_f(&pid_dir.p, 0.5);
        else if(flag_pid_K == PID_KD)   parameter_plus_minus_f(&pid_dir.d, 0.5);
    }
    else if(flag_which_pid == PID_YAW)
    {
        if(flag_pid_K == PID_KP)        parameter_plus_minus_f(&pid_yaw.p, 0.1);
        else if(flag_pid_K == PID_KD)   parameter_plus_minus_f(&pid_yaw.d, 0.1);
    }
    else if(flag_other_parameter == 1)     parameter_plus_minus_f(&target_angle, 1);
    else if(flag_other_parameter == 2)     parameter_plus_minus_i(&target_speed_max, 5);
    else if(flag_other_parameter == 3)     parameter_plus_minus_ui(&set_time, 1);
    else if(flag_other_parameter == 4)     parameter_plus_minus_f(&k_hv, 0.1);
    else if(flag_other_parameter == 5)     parameter_plus_minus_f(&k_circle[0], 0.1);
    else if(flag_other_parameter == 6)     parameter_plus_minus_f(&k_md, 0.1);
    else if(flag_other_parameter == 7)     parameter_plus_minus_f(&pid_dir_pset, 0.5);
    else if(flag_other_parameter == 8)     parameter_plus_minus_f(&ftestVal6, 1);
    else if(flag_other_parameter == 9)     parameter_plus_minus_f(&k_adc, 0.01);
    else if(flag_other_parameter == 10)    parameter_plus_minus_f(&k_circle[1], 0.1);
    else if(flag_other_parameter == 11)    parameter_plus_minus_f(&k_circle[2], 0.1);
    else if(flag_other_parameter == 12)    parameter_plus_minus_f(&k_circle[3], 0.1);
    else if(flag_other_parameter == 13)    parameter_plus_minus_f(&k_circle[4], 0.1);
    else if(flag_other_parameter == 14)    parameter_plus_minus_ui(&cl_out_delay, 10);
    else if(flag_other_parameter == 15)    parameter_plus_minus_ui(&cl_num, 1);
    else if(flag_other_parameter == 16)    parameter_plus_minus_ui(&cl_time, 5);
    else if(flag_other_parameter == 17)    parameter_plus_minus_ui(&stop_time, 1);
    else if(flag_other_parameter == 18)    parameter_plus_minus_ui(&test_a, 1);
    else if(flag_other_parameter == 19)    parameter_plus_minus_ui(&test_b, 1);*/
}

void inf_adj(uint8 *page, uint8 *choice)
{
    static uint8 cnt=0;
    if(flag_updown == 0)
    {
        switch (inf_buf)
        {
        case 'o':
            if(*page == 3 || *page == 4)
                flag_updown = 1;
                break;
        case 'b':
            if(*page == 2 || *page == 5) *page = 1;
            else if(*page == 3 || *page == 4 || *page == 6 || *page == 7)
            {
                if(flag_updown)
                    flag_updown = 0;
                else
                    *page = 1;
            }
            break;
        case 's': *page = 1; *choice = 1; break;
        case '0':
            if(*page == 4)
            {
                *page = 3;
            }
            else if(*page == 7)
            {
                *page = 6;
            }
            *choice = 8;
            break;
        case '1': *choice = 1; break;
        case '2': *choice = 2; break;
        case '3': *choice = 3; break;
        case '4': *choice = 4; break;
        case '5': *choice = 5; break;
        case '6': *choice = 6; break;
        case '7': *choice = 7; break;
        case '8': *choice = 8; break;
        case '9':
            if(*page == 3)
            {
                *page = 4;
            }
            else if(*page == 6)
            {
                *page = 7;
            }
            *choice = 1;
            break;
        }
    }
    else
    {
        switch (inf_buf)
        {
        case 'p': flag_plus = 1; break;
        case 'm': flag_minus = 1; break;
        case 'o': flag_updown = 0; break;
        case 'b': flag_updown = 0; break;
        case '.':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            if(cnt < 9)
            {
                inf_buff[cnt++] = inf_buf;
            }
            break;
        }
    }
}

//oled调试界面
void displayUI(void)
{
    uint8 key, page = 0, choice = 0;
    uint8 i;
    OLED_Init();
    OLED_Fill(0X00);
    //init_infrared();
    gpio_init(KEY_PIN_U, GPI, 0); //down
    gpio_init(KEY_PIN_D, GPI, 0); //right
    gpio_init(KEY_PIN_L, GPI, 0); //left
    gpio_init(KEY_PIN_R, GPI, 0); //up
    gpio_init(KEY_PIN_M, GPI, 0); //mid

    while(1)
    {
        if(flag.mode != 0) break;
        key = readKey();
        if(flag_inf==1)
        {
            for(i=0; i<21; i++)
            {
                if(inf_buf == inf_key[i])
                {
                    inf_buf = inf_value[i];
                    inf_adj(&page, &choice);
                    break;
                }
            }
        }

        if(key == 3 || inf_buf == 'd')//下键
        {
            if(flag_updown == 0)
            {
                if(choice < 8)
                {
                    OLED_fill(0,6,choice-1,0);
                    choice++;
                }
                else if(choice == 8)
                {
                    if(page == 3)
                    {
                        page = 4;
                    }
                    else if(page == 6)
                    {
                        page = 7;
                    }
                    choice = 1;
                }
                OLED_P6x8Str(0,choice-1,"*");
            }
            else if(flag_updown == 1)
            {
                flag_minus = 1;
            }
        }
        else if(key == 1 || inf_buf == 'u')//上键
        {
            if(flag_updown == 0)
            {
                if(choice > 1)
                {
                    OLED_fill(0,6,choice-1,0);
                    choice--;
                }
                else if(choice == 1)
                {
                    if(page == 4)
                    {
                        page = 3;
                    }
                    else if(page == 7)
                    {
                        page = 6;
                    }
                    choice = 8;
                }
                OLED_P6x8Str(0,choice-1,"*");
            }
            else if(flag_updown == 1)
            {
                flag_plus = 1;
            }
        }
        else if(key == 4 || inf_buf == 'r')//右键
        {
            if(page == 1)
            {
                if(choice == 2) page = 5;
                else if(choice == 3) page = 2;
                else if(choice == 4) page = 3;
                else if(choice == 5) page = 6;
            }
        }
        else if(key == 2 || inf_buf == 'l')//左键
        {
            if(page == 2 || page == 5) page = 1;
            else if(page == 3 || page == 4 || page == 6 || page == 7)
            {
                if(flag_updown)
                    flag_updown = 0;
                else
                    page = 1;
            }
        }
        else if(key == 5 || inf_buf == 'c')//按下
        {
            if(page == 0)
            {
                switch(choice)
                {
                    case 0:
                    case 1:data_read(0);flag.data_n = 0;break;
                    case 2:data_read(1);flag.data_n = 1;break;
                    case 3:break;
                    case 4:break;
                    case 5:flag.data_n = 0;break;
                    case 6:flag.data_n = 1;break;
                    case 7:break;
                    case 8:break;
                }
                 page = 1;
            }
            else if(page == 1 && choice == 1)
            {
                flag.mode = MODE_START;
            }
            else if(page == 2)
            {
                switch(choice)
                {
                    case 1:set_time = 6;break;
                    case 2:set_time = 17;break;
                    case 3:set_time = 50;break;
                    case 4:flag.mode = MODE_STAND;break;
                    case 5:flag.mode = MODE_DEBUG;break;
                    case 6:flag.mode = MODE_STA_SPD;break;
                    case 7:flag.mode = MODE_STA_DIR;break;
                    case 8:flag.mode = MODE_PWM_TEST;break;
                }
            }
            else if(page == 3)
            {
                flag_updown = 1;
                switch(choice)
                {
                    case 1:flag_other_parameter = 7; break;
                    case 2:flag_which_pid = PID_DIR1; flag_pid_K = 3; break;
                    case 3:flag_which_pid = PID_YAW1; flag_pid_K = 1; break;
                    case 4:flag_which_pid = PID_YAW1; flag_pid_K = 3; break;
                    case 5:flag_which_pid = PID_SPEED1; flag_pid_K = 1; break;
                    case 6:flag_which_pid = PID_SPEED1; flag_pid_K = 2; break;
                    case 7:flag_which_pid = PID_SPEED1; flag_pid_K = 3; break;
                    case 8:flag_other_parameter = 4; break;

                }
            }
            else if(page == 4)
            {
                flag_updown = 1;
                switch(choice)
                {
                    case 1:flag_other_parameter = 1; break;
                    case 2:flag_other_parameter = 2; break;
                    case 3:flag_other_parameter = 3; break;
                    case 4:flag_which_pid = PID_ANGLE1; flag_pid_K = 1; break;
                    case 5:flag_which_pid = PID_ANGLE1; flag_pid_K = 3; break;
                }
            }
            else if(page == 6)
            {
                flag_updown = 1;
                switch(choice)
                {
                    case 1:flag_other_parameter = 6; break;
                    case 2:flag_other_parameter = 8; break;
                    case 3:flag_other_parameter = 9; break;
                    case 4:flag_other_parameter = 5; break;
                    case 5:flag_other_parameter = 10; break;
                    case 6:flag_other_parameter = 11; break;
                    case 7:flag_other_parameter = 12; break;
                    case 8:flag_other_parameter = 13; break;
                }
            }
            else if(page == 7)
            {
                flag_updown = 1;
                switch(choice)
                {
                    case 1:flag_other_parameter = 14; break;
                    case 2:flag_other_parameter = 15; break;
                    case 3:flag_other_parameter = 16; break;
                    case 4:flag_other_parameter = 17; break;
                    case 5:flag_other_parameter = 18; break;
                    case 6:flag_other_parameter = 19; break;
                    //case 7:flag_which_pid = PID_ARATE; flag_pid_K = 1;flag_updown = 1; break;
                    //case 8:flag_which_pid = PID_ARATE; flag_pid_K = 3;flag_updown = 1; break;
                }
            }
        }
        print_menu(page, choice);
        adj_parameter();
        if(flag_inf==1 && inf_buf == 0)
        {
            flag_inf = 0;
        }
    }
    OLED_Fill(0X00);
}